local a = coroutine.wrap(function(...) local a = {} local b, c, d = "^[%c%s]*", "[%c%s]*", "[%c%s]+" local e = "[%z\x01-\x7F\xC2-\xF4][\x80-\xBF]+" local f = "0x[%da-fA-F]+" local g = "%d+%.?%d*[eE][%+%-]?%d+" local h = "%d+[%._]?[%d_eE]*" local i = "[:;<>/~%*%(%)%-={},%.#%^%+%%]+" local j = "[%[%]]+" local k = "[%a_][%w_]*" local l = "(['\"])%1" local m = "(['\"])[^\n]-([^\\]%1)" local n = "(['\"]).-\n" local o = "(['\"])[^\n]*" local p = "%[(=*)%[.-%]%1%]" local q = "%[=*%[.-.*" local r = "%-%-%[(=*)%[.-%]%1%]" local s = "%-%-%[=*%[.-.*" local t = "%-%-.-\n" local _ = "%-%-.*" local u = coroutine.wrap(function(...) return{keyword={["and"]=true,["break"]=true,["do"]=true,["else"]=true,["elseif"]=true,["end"]=true,["false"]=true,["for"]=true,["function"]=true,["if"]=true,["in"]=true,["local"]=true,["nil"]=true,["not"]=true,["while"]=true,["or"]=true,["repeat"]=true,["return"]=true,["then"]=true,["true"]=true,["self"]=true,["until"]=true,["continue"]=true,["export"]=true,["+="]=true,["-="]=true,["/="]=true,["%="]=true,["sirius"]=true,["iy"]=true},scripts={["sirius"]=true,["iy"]=true},builtin={["assert"]=true,["collectgarbage"]=true,["error"]=true,["getfenv"]=true,["getmetatable"]=true,["ipairs"]=true,["loadstring"]=true,["newproxy"]=true,["next"]=true,["pairs"]=true,["pcall"]=true,["print"]=true,["rawequal"]=true,["rawget"]=true,["rawset"]=true,["select"]=true,["setfenv"]=true,["setmetatable"]=true,["tonumber"]=true,["tostring"]=true,["type"]=true,["unpack"]=true,["xpcall"]=true,["_G"]=true,["_VERSION"]=true,["bit32"]=true,["coroutine"]=true,["debug"]=true,["math"]=true,["os"]=true,["string"]=true,["table"]=true,["utf8"]=true,["delay"]=true,["elapsedTime"]=true,["gcinfo"]=true,["require"]=true,["settings"]=true,["spawn"]=true,["tick"]=true,["time"]=true,["typeof"]=true,["UserSettings"]=true,["wait"]=true,["warn"]=true,["ypcall"]=true,["Enum"]=true,["game"]=true,["shared"]=true,["script"]=true,["workspace"]=true,["plugin"]=true,["Axes"]=true,["BrickColor"]=true,["CatalogSearchParams"]=true,["CellId"]=true,["CFrame"]=true,["Color3"]=true,["ColorSequence"]=true,["ColorSequenceKeypoint"]=true,["DateTime"]=true,["DockWidgetPluginGuiInfo"]=true,["Faces"]=true,["File"]=true,["FloatCurveKey"]=true,["Instance"]=true,["NumberRange"]=true,["NumberSequence"]=true,["NumberSequenceKeypoint"]=true,["OverlapParams"]=true,["PathWaypoint"]=true,["PhysicalProperties"]=true,["PluginDrag"]=true,["Random"]=true,["Ray"]=true,["RaycastParams"]=true,["Rect"]=true,["Region3"]=true,["Region3int16"]=true,["RotationCurveKey"]=true,["task"]=true,["TextChatMessageProperties"]=true,["TweenInfo"]=true,["UDim"]=true,["UDim2"]=true,["Vector2"]=true,["Vector2int16"]=true,["Vector3"]=true,["Vector3int16"]=true},libraries={math={abs=true,acos=true,asin=true,atan=true,atan2=true,ceil=true,clamp=true,cos=true,cosh=true,deg=true,exp=true,floor=true,fmod=true,frexp=true,ldexp=true,log=true,log10=true,max=true,min=true,modf=true,noise=true,pow=true,rad=true,random=true,round=true,sinh=true,sqrt=true,tan=true,tanh=true,sign=true,sin=true,randomseed=true,huge=true,pi=true},string={byte=true,char=true,find=true,format=true,gmatch=true,gsub=true,len=true,lower=true,match=true,pack=true,packsize=true,rep=true,reverse=true,split=true,sub=true,unpack=true,upper=true},table={clear=true,concat=true,foreach=true,foreachi=true,freeze=true,getn=true,insert=true,isfrozen=true,maxn=true,remove=true,sort=true,find=true,pack=true,unpack=true,move=true,create=true},debug={dumpheap=true,info=true,profilebegin=true,profileend=true,resetmemorycategory=true,setmemorycategory=true,traceback=true},os={time=true,date=true,difftime=true,clock=true},coroutine={create=true,isyieldable=true,resume=true,running=true,status=true,wrap=true,yield=true},bit32={arshift=true,band=true,bnot=true,bor=true,btest=true,bxor=true,countlz=true,countrz=true,extract=true,lrotate=true,lshift=true,replace=true,rrotate=true,rshift=true},utf8={char=true,codepoint=true,codes=true,graphemes=true,len=true,nfcnormalize=true,nfdnormalize=true,offset=true,charpattern=true},Axes={new=true},BrickColor={new=true,New=true,Random=true,Black=true,Blue=true,DarkGray=true,Gray=true,Green=true,Red=true,White=true,Yellow=true,palette=true,random=true},CatalogSearchParams={new=true},CellId={new=true},CFrame={new=true,Angles=true,fromAxisAngle=true,fromEulerAnglesXYZ=true,fromEulerAnglesYXZ=true,fromMatrix=true,fromOrientation=true,lookAt=true,identity=true},Color3={new=true,fromRGB=true,fromHSV=true,fromHex=true,toHSV=true},ColorSequence={new=true},ColorSequenceKeypoint={new=true},DateTime={now=true,fromIsoDate=true,fromLocalTime=true,fromUniversalTime=true,fromUnixTimestamp=true,fromUnixTimestampMillis=true},DockWidgetPluginGuiInfo={new=true},Faces={new=true},FloatCurveKey={new=true},Instance={new=true},NumberRange={new=true},NumberSequence={new=true},NumberSequenceKeypoint={new=true},OverlapParams={new=true},PathWaypoint={new=true},PhysicalProperties={new=true},PluginDrag={new=true},Random={new=true},Ray={new=true},RaycastParams={new=true},Rect={new=true},Region3={new=true},Region3int16={new=true},RotationCurveKey={new=true},task={wait=true,spawn=true,delay=true,defer=true,synchronize=true,desynchronize=true},TweenInfo={new=true},UDim={new=true},UDim2={new=true,fromScale=true,fromOffset=true},Vector2={new=true,one=true,zero=true,xAxis=true,yAxis=true},Vector2int16={new=true},Vector3={new=true,fromAxis=true,fromNormalId=true,FromAxis=true,FromNormalId=true,one=true,zero=true,xAxis=true,yAxis=true,zAxis=true},Vector3int16={new=true}}} end)(...) local v = u.keyword local w = u.builtin local u = u.libraries local _ = { { b .. k .. c, "var" }, { b .. f .. c, "number" }, { b .. g .. c, "number" }, { b .. h .. c, "number" }, { b .. l .. c, "string" }, { b .. m .. c, "string" }, { b .. n .. c, "string" }, { b .. o .. c, "string" }, { b .. p .. c, "string" }, { b .. q .. c, "string" }, { b .. r .. c, "comment" }, { b .. s .. c, "comment" }, { b .. t .. c, "comment" }, { b .. "%-%-@" .. c, "keyword" }, { b .. _ .. c, "comment" }, { b .. i .. c, "operator" }, { b .. j .. c, "operator" }, { b .. e .. c, "iden" }, { "^.", "iden" }, } function a.scan(n) a.finished = false local e = 1 local t = #n local o, g, s, q = "", "", "", "" return function() if e <= t then for _, r in ipairs(_) do local p, _ = string.find(n, r[1], e) if p then local p = string.sub(n, p, _) e = _ + 1 a.finished = e > t local _ = r[2] local r = _ if _ == "var" then local t = string.gsub(p, d, "") if v[t] then r = "scripts" elseif w[t] then r = "builtin" else r = "iden" end if string.find(o, "%.[%s%c]*$") and q ~= "comment" then local _ = string.gsub(g, d, "") local _ = u[_] if _ and _[t] and not string.find(s, "%.[%s%c]*$") then r = "builtin" else r = "iden" end end end s = g g = o o = p q = r return r, p end end end end end function a.navigator() local q = { Source = "", TokenCache = table.create(50), _RealIndex = 0, _UserIndex = 0, _ScanThread = nil } function q:Destroy() self.Source = nil self._RealIndex = nil self._UserIndex = nil self.TokenCache = nil self._ScanThread = nil end function q:SetSource(_) self.Source = _ self._RealIndex = 0 self._UserIndex = 0 table.clear(self.TokenCache) self._ScanThread = coroutine.create(function() for _, t in a.scan(self.Source) do self._RealIndex += 1 self.TokenCache[self._RealIndex] = { _, t } coroutine.yield(_, t) end end) end function q.Next() q._UserIndex += 1 if q._RealIndex >= q._UserIndex then return table.unpack(q.TokenCache[q._UserIndex]) else if coroutine.status(q._ScanThread) == "dead" then return else local t, s, _ = coroutine.resume(q._ScanThread) if t and s then return s, _ else return end end end end function q.Peek(_) local _ = q._UserIndex + _ if q._RealIndex >= _ then if _ > 0 then return table.unpack(q.TokenCache[_]) else return end else if coroutine.status(q._ScanThread) == "dead" then return else local _ = _ - q._RealIndex local t, v, s = nil, nil, nil for _ = 1, _ do t, v, s = coroutine.resume(q._ScanThread) if not (t or v) then break end end return v, s end end end return q end return a end)(...) local b = table.create(7) local c = table.create(7) local d = table.create(3) local function e(_) return string.gsub( string.gsub(string.gsub(string.gsub(string.gsub(_, "&", "&amp;"), "<", "&lt;"), ">", "&gt;"), '"', "&quot;"), "'", "&apos;" ) end local function _(_) return string.gsub(_, "\t", "    ") end local function f(_) return string.gsub(_, "[\0\1\2\3\4\5\6\7\8\11\12\13\14\15\16\17\18\19\20\21\22\23\24\25\26\27\28\29\30\31]+", "") end local function g(h, i) i = _(f(i or h.Text)) h.RichText = false h.Text = i h.TextXAlignment = Enum.TextXAlignment.Left h.TextYAlignment = Enum.TextYAlignment.Top h.BackgroundColor3 = b.background h.TextColor3 = b.iden h.TextTransparency = 0.5 local f = h.TextSize local _, _ = string.gsub(i, "\n", "") _ += 1 local j = d[h] if not j then j = table.create(_) for _ = 1, _ do local a = Instance.new("TextLabel") a.Name = "Line_" .. _ a.RichText = true a.BackgroundTransparency = 1 a.TextXAlignment = Enum.TextXAlignment.Left a.TextYAlignment = Enum.TextYAlignment.Top a.TextColor3 = b.iden a.Font = h.Font a.TextSize = f a.Size = UDim2.new(1, 0, 0, f) a.Position = UDim2.fromOffset(0, (f * h.LineHeight) * (_ - 1)) a.Text = "" a.Parent = h j[_] = a end elseif #j < _ then for _ = #j + 1, _ do local a = Instance.new("TextLabel") a.Name = "Line_" .. _ a.RichText = true a.BackgroundTransparency = 1 a.TextXAlignment = Enum.TextXAlignment.Left a.TextYAlignment = Enum.TextYAlignment.Top a.TextColor3 = b.iden a.Font = h.Font a.TextSize = f a.Size = UDim2.new(1, 0, 0, f) a.Position = UDim2.fromOffset(0, (f * h.LineHeight) * (_ - 1)) a.Text = "" a.Parent = h j[_] = a end elseif #j > _ then for _ = #j, _, -1 do j[_].Text = "" end end local k, l, g = {}, 0, 1 for f, _ in a.scan(i) do local a = b[f] or b.iden local _ = string.split(e(_), "\n") for _, e in ipairs(_) do if _ > 1 then j[g].Text = table.concat(k) g += 1 l = 0 table.clear(k) end l += 1 if a ~= b.iden and string.find(e, "[%S%C]") then k[l] = string.format(c[f], e) else k[l] = e end end end j[g].Text = table.concat(k) d[h] = j local _ _ = h.AncestryChanged:Connect(function() if h.Parent then return end d[h] = nil _:Disconnect() end) return function() for _, _ in ipairs(j) do _:Destroy() end table.clear(j) d[h] = nil _:Disconnect() end end local function _(_) b.scripts = (_ and _.scripts) or Color3.fromRGB(241, 107, 138) b.background = (_ and _.background) or Color3.fromRGB(47, 47, 47) b.iden = (_ and _.iden) or Color3.fromRGB(234, 234, 234) b.keyword = (_ and _.keyword) or Color3.fromRGB(215, 174, 255) b.builtin = (_ and _.builtin) or Color3.fromRGB(131, 206, 255) b.string = (_ and _.string) or Color3.fromRGB(196, 255, 193) b.number = (_ and _.number) or Color3.fromRGB(255, 125, 125) b.comment = (_ and _.comment) or Color3.fromRGB(140, 140, 155) b.operator = (_ and _.operator) or Color3.fromRGB(255, 239, 148) for _, a in pairs(b) do c[_] = '<font color="#' .. string.format("%.2x%.2x%.2x", a.R * 255, a.G * 255, a.B * 255) .. '">%s</font>' end for a, _ in pairs(d) do for _, _ in ipairs(_) do _.TextColor3 = b.iden end g(a) end end pcall(_) return setmetatable({ UpdateColors = _, Highlight = g }, { __call = function(_, _, a) return g(_, a) end, })